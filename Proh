using System;

namespace BibliotecaVentas
{
    public class OpeDescVta
    {
        // Atributos privados
        private int intCod;
        private int intCant;
        private float fltVrDoc;
        private float fltPorcIva;
        private float fltSubTot;
        private float fltPorcDscto;
        private float fltVrDscto;
        private float fltVrIVA;
        private float fltTotAPag;
        private string strError;

        // Propiedades públicas con validaciones de entrada
        public int Codigo
        {
            get { return intCod; }
            set { intCod = value; }
        }

        public int Cantidad
        {
            get { return intCant; }
            set
            {
                if (value <= 0)
                    throw new ArgumentException("La cantidad debe ser mayor que 0.");
                intCant = value;
            }
        }

        public float vrDocena
        {
            get { return fltVrDoc; }
            set
            {
                if (value <= 0)
                    throw new ArgumentException("El valor por docena debe ser mayor que 0.");
                fltVrDoc = value;
            }
        }

        public float porcIVA
        {
            get { return fltPorcIva; }
            set
            {
                if (value < 0 || value > 100)
                    throw new ArgumentException("El porcentaje de IVA debe estar entre 0 y 100.");
                fltPorcIva = value;
            }
        }

        public float porcDscto
        {
            get { return fltPorcDscto; }
            set
            {
                if (value < 0 || value > 100)
                    throw new ArgumentException("El porcentaje de descuento debe estar entre 0 y 100.");
                fltPorcDscto = value;
            }
        }

        public float subTotal
        {
            get { return fltSubTot; }
        }

        public float vrDscto
        {
            get { return fltVrDscto; }
        }

        public float vrIVA
        {
            get { return fltVrIVA; }
        }

        public float totalAPagar
        {
            get { return fltTotAPag; }
        }

        public string Error
        {
            get { return strError; }
        }

        // Método para validar datos antes de facturar
        public bool Validar()
        {
            if (intCant <= 0 || fltVrDoc <= 0)
            {
                strError = "La cantidad y el valor del documento deben ser mayores que 0.";
                return false;
            }
            if (fltPorcIva < 0 || fltPorcIva > 100)
            {
                strError = "El porcentaje de IVA debe estar entre 0 y 100.";
                return false;
            }
            if (fltPorcDscto < 0 || fltPorcDscto > 100)
            {
                strError = "El porcentaje de descuento debe estar entre 0 y 100.";
                return false;
            }
            return true;
        }

        // Método para calcular descuentos, IVA y total a pagar
        public bool Facturar()
        {
            if (!Validar())
            {
                return false;
            }

            // Cálculos
            fltSubTot = intCant * fltVrDoc;
            fltVrDscto = (fltPorcDscto / 100) * fltSubTot;
            fltVrIVA = (fltPorcIva / 100) * (fltSubTot - fltVrDscto);
            fltTotAPag = fltSubTot - fltVrDscto + fltVrIVA;

            // Validación de salida: No permitir valores negativos
            if (fltSubTot < 0 || fltVrDscto < 0 || fltVrIVA < 0 || fltTotAPag < 0)
            {
                strError = "Error en los cálculos, valores negativos detectados.";
                return false;
            }

            return true;
        }
    }
}
